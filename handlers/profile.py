from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from monika_bot.services.memory import read_memory, update_memory
import logging

logger = logging.getLogger(__name__)
router = Router()

class ProfileSettingsStates(StatesGroup):
    WAITING_SETTINGS = State()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    await callback.answer()
    user_id = str(callback.from_user.id)
    global_memory = read_memory("global").get(user_id, {})
    mood_data = read_memory("mood").get(user_id, [])
    goals_data = read_memory("goals").get(user_id, [])
    learning_data = read_memory("learning").get(user_id, [])

    profile_text = f"üåü *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, {global_memory.get('name', '–î—Ä—É–≥')}* üåü\n\n"
    if global_memory.get("interests"):
        profile_text += f"üåà *–ò–Ω—Ç–µ—Ä–µ—Å—ã*: {', '.join(global_memory['interests'][-5:])}\n"
    if goals_data:
        profile_text += f"üéØ *–¶–µ–ª–∏*: {', '.join(goals_data)}\n"
    if mood_data:
        profile_text += f"üòä *–ù–µ–¥–∞–≤–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*: {', '.join([f'{m['date']} ‚Äî {m['mood']}' for m in mood_data[-3:]])}\n"
    profile_text += f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã {'–≤–∫–ª—é—á–µ–Ω—ã' if global_memory.get('daily_quotes', True) else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}\n"
    profile_text += f"–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if global_memory.get('auto_messages_enabled', True) else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}\n"
    profile_text += f"üéñ *–ë–∞–ª–ª—ã*: {global_memory.get('points', 0)}"

    await callback.message.reply_text(profile_text, reply_markup={
        "inline_keyboard": [[{"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "profile_settings"},
                             {"text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è", "callback_data": "toggle_auto_messages"}]]
    })

@router.callback_query(F.data == "toggle_auto_messages")
async def toggle_auto_messages(callback: CallbackQuery):
    await callback.answer()
    user_id = str(callback.from_user.id)
    global_memory = read_memory("global").get(user_id, {})
    current = global_memory.get("auto_messages_enabled", True)
    global_memory["auto_messages_enabled"] = not current
    update_memory("global", {user_id: global_memory})
    await callback.message.reply_text(
        f"–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if not current else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!"
    )

@router.callback_query(F.data == "profile_settings")
async def profile_settings_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.reply_text(
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–º—è: –ê–Ω–Ω–∞', '–ò–Ω—Ç–µ—Ä–µ—Å: –ö–æ—Å–º–æ—Å', '–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã'"
    )
    await state.set_state(ProfileSettingsStates.WAITING_SETTINGS)

@router.message(ProfileSettingsStates.WAITING_SETTINGS)
async def handle_profile_settings(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    text = message.text.strip()
    global_memory = read_memory("global").get(user_id, {})
    
    if "–ò–º—è:" in text:
        global_memory["name"] = text.split("–ò–º—è:")[1].strip()
    elif "–ò–Ω—Ç–µ—Ä–µ—Å:" in text:
        global_memory.setdefault("interests", []).append(text.split("–ò–Ω—Ç–µ—Ä–µ—Å:")[1].strip())
    elif "–û—Ç–∫–ª—é—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã" in text:
        global_memory["daily_quotes"] = False
    elif "–í–∫–ª—é—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã" in text:
        global_memory["daily_quotes"] = True
    update_memory("global", {user_id: global_memory})
    await message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ß—Ç–æ –µ—â—ë —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_main_keyboard())
    await state.clear()