from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from monika_bot.services.memory import read_memory, update_memory
from monika_bot.services.ai_service import ask_ai
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = Router()

class MoodStates(StatesGroup):
    WAITING_MOOD = State()

@router.callback_query(F.data == "mood")
async def mood_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.reply_text("–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? (–ù–∞–ø—Ä–∏–º–µ—Ä, '–≤–µ—Å—ë–ª–æ–µ', '–≥—Ä—É—Å—Ç–Ω–æ–µ' –∏–ª–∏ –æ–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!)")
    await state.set_state(MoodStates.WAITING_MOOD)

@router.message(MoodStates.WAITING_MOOD)
async def handle_mood(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    mood = message.text.strip()
    update_memory("mood", {user_id: read_memory("mood").get(user_id, []) + [{"mood": mood, "date": datetime.now().isoformat()}]})
    
    is_personal, reason = await ask_ai(user_id, mood, "mood", message.bot)
    if is_personal:
        await message.reply_text(is_personal)
    elif "–≥—Ä—É—Å—Ç" in mood.lower():
        prompt = f"–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É –¥–ª—è 11-–ª–µ—Ç–Ω–µ–π –¥–µ–≤–æ—á–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –≥—Ä—É—Å—Ç–∏—Ç."
        completion = await client.chat.completions.create(
            model="horizon-beta",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=100,
            temperature=0.7
        )
        quote = completion.choices[0].message.content.strip()
        await message.reply_text(f"–ù–µ –≥—Ä—É—Å—Ç–∏, –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ! üòä –í–æ—Ç —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç–∞: {quote}")
    else:
        await message.reply_text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å! üòä –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?")
    await state.clear()