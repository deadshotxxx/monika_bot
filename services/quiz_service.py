import random
import logging
from monika_bot.services.memory import read_memory, update_memory
from monika_bot.services.ai_service import ask_ai

logger = logging.getLogger(__name__)

async def get_quiz_question(user_id: str, bot) -> dict:
    quiz_data = read_memory("quiz")
    learning_data = read_memory("learning").get(user_id, [])
    interests = read_memory("global").get(user_id, {}).get("interests", [])
    
    if learning_data and random.random() < 0.5:
        topic = random.choice([t["topic"] for t in learning_data])
        question = await ask_ai(user_id, f"–°–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{topic}'", "quiz", bot)
        return eval(question)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Horizon Beta –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–ø–æ–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    elif interests:
        question = await ask_ai(user_id, f"–°–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {', '.join(interests)}", "quiz", bot)
        return eval(question)
    
    default_quiz = {
        "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è?",
        "options": ["–ó–µ–º–ª—è", "–Æ–ø–∏—Ç–µ—Ä", "–ú–∞—Ä—Å", "–°–∞—Ç—É—Ä–Ω"],
        "answer": "–Æ–ø–∏—Ç–µ—Ä"
    }
    return default_quiz

def validate_quiz_answer(user_id: str, question: dict, user_answer: str) -> tuple[bool, str]:
    correct = user_answer.lower() == question["answer"].lower()
    feedback = "–ú–æ–ª–æ–¥–µ—Ü, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ" if correct else f"–ù–µ —Å–æ–≤—Å–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë?"
    if correct:
        score = read_memory("quiz").get(user_id, {}).get("score", 0) + 1
        update_memory("quiz", {user_id: {"score": score}})
        global_memory = read_memory("global").get(user_id, {})
        points = global_memory.get("points", 0) + 1
        global_memory["points"] = points
        update_memory("global", {user_id: global_memory})
    return correct, feedback