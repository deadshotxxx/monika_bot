import random
from monika_bot.services.memory import read_memory, update_memory
from monika_bot.services.ai_service import ask_ai
import logging

logger = logging.getLogger(__name__)

class MafiaGame:
    def __init__(self, user_id: str):
        self.user_id = user_id
        self.characters = ["–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å 1", "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å 2", "–ú–∞—Ñ–∏—è", "–®–µ—Ä–∏—Ñ", "–î–æ–∫—Ç–æ—Ä"]
        self.alive = self.characters.copy()
        self.day = 1
        self.role = random.choice(["–®–µ—Ä–∏—Ñ", "–î–æ–∫—Ç–æ—Ä", "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"])
        self.state = "day"
        self.saved_by_doctor = None
        self.descriptions = {}

    async def generate_description(self, character: str, bot) -> str:
        if character not in self.descriptions:
            desc = await ask_ai(self.user_id, f"–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character}'", "mafia", bot)
            self.descriptions[character] = desc
        return self.descriptions[character]

    async def start_game(self, bot) -> str:
        descs = [f"{char}: {await self.generate_description(char, bot)}" for char in self.characters]
        return (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ú–∞—Ñ–∏—è', {read_memory('global').get(self.user_id, {}).get('name', '–î—Ä—É–≥')}!\n"
            f"–¢—ã ‚Äî {self.role}. –í –≥–æ—Ä–æ–¥–µ:\n{'\n'.join(descs)}\n–ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å {self.day}. "
            f"–ö–æ–≥–æ —Ç—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—à—å?"
        )

    async def night_phase(self, bot) -> str:
        if self.role == "–ú–∞—Ñ–∏—è":
            return "–¢—ã ‚Äî –ú–∞—Ñ–∏—è! –ö–æ–≥–æ —Ö–æ—á–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ–π –Ω–æ—á—å—é?"
        elif self.role == "–î–æ–∫—Ç–æ—Ä":
            return "–¢—ã ‚Äî –î–æ–∫—Ç–æ—Ä! –ö–æ–≥–æ —Ö–æ—á–µ—à—å —Å–ø–∞—Å—Ç–∏ —ç—Ç–æ–π –Ω–æ—á—å—é?"
        return "–ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞, –≥–æ—Ä–æ–¥ —Å–ø–∏—Ç. –ñ–¥—ë–º —É—Ç—Ä–∞..."

    async def day_phase(self, bot) -> str:
        return f"–î–µ–Ω—å {self.day}. –í –≥–æ—Ä–æ–¥–µ: {', '.join(self.alive)}. –ö–æ–≥–æ —Ç—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—à—å?"

    async def make_choice(self, choice: str, phase: str, bot) -> tuple[str, bool]:
        if choice not in self.alive:
            return "–¢–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –∏—Å–∫–ª—é—á—ë–Ω. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–≥–æ!", False
        
        if phase == "night" and self.role == "–î–æ–∫—Ç–æ—Ä":
            self.saved_by_doctor = choice
            return f"–¢—ã —Å–ø–∞—Å–ª–∞ {choice} —ç—Ç–æ–π –Ω–æ—á—å—é. –ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å {self.day}.", False
        elif phase == "night" and self.role == "–ú–∞—Ñ–∏—è":
            if choice == self.saved_by_doctor:
                return f"–ú–∞—Ñ–∏—è –ø—ã—Ç–∞–ª–∞—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å {choice}, –Ω–æ –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å –µ–≥–æ! –ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å {self.day}.", False
            self.alive.remove(choice)
            if choice == "–®–µ—Ä–∏—Ñ":
                update_memory("game", {self.user_id: {"status": "lose", "day": self.day}})
                return "–ú–∞—Ñ–∏—è –∏—Å–∫–ª—é—á–∏–ª–∞ –®–µ—Ä–∏—Ñ–∞... –ì–æ—Ä–æ–¥ –ø—Ä–æ–∏–≥—Ä–∞–ª. üòî –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞?", True
            return f"–ú–∞—Ñ–∏—è –∏—Å–∫–ª—é—á–∏–ª–∞ {choice}. –ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å {self.day}.", False
        
        self.alive.remove(choice)
        if choice == "–ú–∞—Ñ–∏—è":
            update_memory("game", {self.user_id: {"status": "win", "day": self.day}})
            return "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –Ω–∞—à–ª–∞ –ú–∞—Ñ–∏—é! –ì–æ—Ä–æ–¥ —Å–ø–∞—Å—ë–Ω! üéâ –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?", True
        self.day += 1
        if len(self.alive) <= 2:
            update_memory("game", {self.user_id: {"status": "lose", "day": self.day}})
            return "–£–≤—ã, –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞... üòî –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?", True
        return f"–¢—ã –∏—Å–∫–ª—é—á–∏–ª–∞ {choice}, –Ω–æ —ç—Ç–æ –±—ã–ª –Ω–µ –ú–∞—Ñ–∏—è. –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å {self.day}.", False

def start_mafia_game(user_id: str) -> 'MafiaGame':
    game = MafiaGame(user_id)
    update_memory("game", {user_id: {"status": "ongoing", "day": game.day, "alive": game.alive, "state": game.state}})
    return game

def load_mafia_game(user_id: str) -> 'MafiaGame':
    game_data = read_memory("game").get(user_id, {})
    if game_data.get("status") == "ongoing":
        game = MafiaGame(user_id)
        game.day = game_data.get("day", 1)
        game.alive = game_data.get("alive", game.characters)
        game.state = game_data.get("state", "day")
        return game
    return start_mafia_game(user_id)